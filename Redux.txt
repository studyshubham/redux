Redux Definition:-

    "Redux is a predictable state container for JavaScript apps"
    It is for JavaScript apps
    It is a state container
    It is predictable

Three Principles

    First Principle
        "The state of your whole application is stored in an object tree within
        a single store"
        Maintain our application state in a single object which would be managed by the   Redux store

    Cake Shop -
        Let's assume we are tracking the number of cakes on the shelf
        {
            numberOfCakes : 10
        }

    Second Principle
        "The only way to change the state is to emit an action, an object describing
        what happened"
        To update the state of your app, you need to let Redux know about that
        with an action
        Not allowed to directly update the state object

    Cake Shop -
        Let the shopkeeper know about out action - BUY_CAKE
        {
            type : BUY_CAKE
        }

    Third Principle
        "To specify how the state tree is transformed by action, you write
        pure reducers"
        Reducers - (previousState, action) => newState

    Cake Shop -
        Reducer is the shopkeeper

        const reducer = (state, action) => {
            switch (action.type) {
                case BUY_CAKE: return {
                    numberOfCakes: state.numberOfCakes - 1
                }
            }
        }

    Actions 
        The only way your application can interact with the store
        Carry some information from your app to the redux store
        Plain JavaScript objects
        Have a 'type' property that indicates the type of action
        being performed
        The 'type' property is typically difined as string constants

    Redux store
        One store for the entire application
        Responsibilities -
        Holds application state
        Allows access to state via getState()
        Allows state to be updated via dispatch(action)
        Registers listeners via subscribe(listener)
        Handles unregistering of listeners via the function returned by subscribe(listener)