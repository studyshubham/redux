Redux Definition:-

    "Redux is a predictable state container for JavaScript apps"
    It is for JavaScript apps
    It is a state container
    It is predictable

Three Principles

    First Principle
        "The state of your whole application is stored in an object tree within
        a single store"
        Maintain our application state in a single object which would be managed by the   Redux store

    Cake Shop -
        Let's assume we are tracking the number of cakes on the shelf
        {
            numberOfCakes : 10
        }

    Second Principle
        "The only way to change the state is to emit an action, an object describing
        what happened"
        To update the state of your app, you need to let Redux know about that
        with an action
        Not allowed to directly update the state object

    Cake Shop -
        Let the shopkeeper know about out action - BUY_CAKE
        {
            type : BUY_CAKE
        }

    Third Principle
        "To specify how the state tree is transformed by action, you write
        pure reducers"
        Reducers - (previousState, action) => newState

    Cake Shop -
        Reducer is the shopkeeper

        const reducer = (state, action) => {
            switch (action.type) {
                case BUY_CAKE: return {
                    numberOfCakes: state.numberOfCakes - 1
                }
            }
        }

    Actions 
        The only way your application can interact with the store
        Carry some information from your app to the redux store
        Plain JavaScript objects
        Have a 'type' property that indicates the type of action
        being performed
        The 'type' property is typically difined as string constants

    Redux store
        One store for the entire application
        Responsibilities -
        Holds application state
        Allows access to state via getState()
        Allows state to be updated via dispatch(action)
        Registers listeners via subscribe(listener)
        Handles unregistering of listeners via the function returned by subscribe(listener)

    Middleware
        Is the suggested way to extend Redux with custom functionality
        Provides a third-party extension point between dispatching and action,
        and the moment it reaches the reducer
        Use middleware for logging, crash reporting, performing asynchronous tasks etc.

    Actions
        Synchronous Actions
        As soon as an action was dispatched, the state was immediately updated.
        If you dispatch the BUY_CAKE action, the numOfCakes was right away decremented by 1.
        Same with BUY_ICECREM action as well.

        Async Actions
        Asynchronous API calls to fetch data from an end point and
        use that data in your application.

    Our Application
        Fetches a list of users from an API end point and stores 
        it in the redux store.

        State ?

        Actions ?

        Reducer ?

    State
        State = {
            loading: true,
            data: [],
            error: ''
        }

        loading - Display a loading spinner in your component
        data - List of users
        error - Display error to the user

    Actions
        FETCH_USERS_REQUEST - Fetch list of users
        FETCH_USERS_SUCCESS - Fetched successfully
        FETCH_USERS_FAILURE - Error fetching the data

    Reducers
        case: FETCH_USERS_REQUEST
              loading: true
        
        case: FETCH_USERS_SUCCESS
              loading: false
              users: data (from API)

        case: FETCH_USERS_FAILURE
              loading: false
              error: error(from API)